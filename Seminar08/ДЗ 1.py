# Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков,
# а затем с использованием функций из библиотек numpy и pandas.

import numpy as np
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt

zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# plt.scatter(zp,ks)
# plt.xlabel('Величина заработной платы "ZP"')
# plt.ylabel('Поведенческий кредитный скоринг "KS"', rotation=90)
# plt.show()

# По графику видно, зависимость линейная. Ожидаем, что между данными существует положительная корреляция.
# Считаем ковариацию:  Cov(xy) = M(XY)-M(X)*M(Y)
cov = np.mean(zp * ks) - np.mean(zp) * np.mean(ks)
print(f'Ковариация ({cov})\n') # 9157.839999999997

# Вычислим ковариацию через смещённую функцию cov
cov_S = np.cov(zp, ks, ddof=0)[0, 1]
print(f'Ковариация cov_S ({cov_S})\n') # 9157.84

corr = cov / (np.std(zp) * np.std(ks))
print(f'Коэффициент корреляции Пирсона ({corr})\n') # 0.8874900920739158

corr_coef = cov / (np.std(zp, ddof=0) * np.std(ks, ddof=0))
print(f'{corr_coef}\n') # 0.8874900920739158

corr_numpy = np.corrcoef(zp, ks)[0][1]
print(f'Коэффициент корреляции Пирсона numpy ({corr_numpy})\n') # 0.8874900920739162

corr_pandas = pd.Series(zp).corr(pd.Series(ks), method='pearson')
print(f'Коэффициент корреляции Пирсона Pandas ({corr_pandas})\n') # 0.8874900920739162